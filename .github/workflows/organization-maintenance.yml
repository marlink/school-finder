name: Organization Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - dependencies
        - security
        - cleanup

permissions:
  contents: write
  pull-requests: write
  security-events: write
  issues: write

jobs:
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'dependencies' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for outdated packages
        id: outdated
        run: |
          npm outdated --json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "Updates available:"
            cat outdated.json | jq -r 'to_entries[] | "\(.key): \(.value.current) -> \(.value.latest)"'
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "All packages are up to date"
          fi

      - name: Create dependency update issue
        if: steps.outdated.outputs.has_updates == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            
            let body = '## ðŸ“¦ Dependency Updates Available\n\n';
            body += 'The following packages have updates available:\n\n';
            body += '| Package | Current | Latest | Type |\n';
            body += '|---------|---------|--------|----- |\n';
            
            for (const [pkg, info] of Object.entries(outdated)) {
              const type = info.type || 'dependencies';
              body += `| ${pkg} | ${info.current} | ${info.latest} | ${type} |\n`;
            }
            
            body += '\n### ðŸ”§ Recommended Actions\n';
            body += '1. Review the changelog for each package\n';
            body += '2. Test updates in a feature branch\n';
            body += '3. Update packages incrementally\n';
            body += '4. Run full test suite after updates\n';
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'maintenance'],
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ“¦ Dependency Updates Available',
                body: body,
                labels: ['dependencies', 'maintenance', 'automated']
              });
            }

  security-scan:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'security' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        id: audit
        run: |
          npm audit --json > audit.json || true
          VULNERABILITIES=$(cat audit.json | jq '.metadata.vulnerabilities.total // 0')
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "Security vulnerabilities found: $VULNERABILITIES"
            cat audit.json | jq '.vulnerabilities'
          else
            echo "No security vulnerabilities found"
          fi

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.audit.outputs.vulnerabilities != '0'
        with:
          sarif_file: audit.json
        continue-on-error: true

      - name: Create security issue
        if: steps.audit.outputs.vulnerabilities != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const audit = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
            
            const vulnCount = audit.metadata?.vulnerabilities?.total || 0;
            if (vulnCount === 0) return;
            
            let body = `## ðŸš¨ Security Vulnerabilities Detected\n\n`;
            body += `Found **${vulnCount}** security vulnerabilities in dependencies.\n\n`;
            body += '### ðŸ”§ Immediate Actions Required\n';
            body += '1. Run `npm audit fix` to auto-fix vulnerabilities\n';
            body += '2. Review and test all fixes\n';
            body += '3. Update dependencies manually if auto-fix fails\n';
            body += '4. Consider alternative packages for unfixable issues\n\n';
            body += '### ðŸ“Š Vulnerability Summary\n';
            
            if (audit.metadata?.vulnerabilities) {
              const vuln = audit.metadata.vulnerabilities;
              body += `- Critical: ${vuln.critical || 0}\n`;
              body += `- High: ${vuln.high || 0}\n`;
              body += `- Moderate: ${vuln.moderate || 0}\n`;
              body += `- Low: ${vuln.low || 0}\n`;
            }
            
            // Check if security issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'urgent'],
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸš¨ Security Vulnerabilities Detected (${vulnCount} total)`,
                body: body,
                labels: ['security', 'urgent', 'automated']
              });
            }

  cleanup-branches:
    name: Cleanup Stale Branches
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete merged branches
        run: |
          # Get all remote branches that have been merged into main
          git branch -r --merged origin/main | \
            grep -v "origin/main" | \
            grep -v "origin/staging" | \
            grep -v "origin/production-ready" | \
            grep -v "origin/HEAD" | \
            sed 's/origin\///' | \
            while read branch; do
              echo "Deleting merged branch: $branch"
              git push origin --delete "$branch" || echo "Failed to delete $branch"
            done

      - name: Clean up Neon preview branches
        if: vars.NEON_PROJECT_ID && secrets.NEON_API_KEY
        run: |
          # List all Neon branches and delete old preview branches
          curl -s -H "Authorization: Bearer ${{ secrets.NEON_API_KEY }}" \
            "https://console.neon.tech/api/v2/projects/${{ vars.NEON_PROJECT_ID }}/branches" | \
            jq -r '.branches[] | select(.name | startswith("preview/pr-")) | .name' | \
            while read branch; do
              # Check if corresponding PR still exists
              PR_NUMBER=$(echo "$branch" | sed 's/preview\/pr-\([0-9]*\)-.*/\1/')
              PR_STATE=$(gh pr view "$PR_NUMBER" --json state --jq '.state' 2>/dev/null || echo "CLOSED")
              
              if [ "$PR_STATE" = "CLOSED" ] || [ "$PR_STATE" = "MERGED" ]; then
                echo "Deleting stale Neon branch: $branch"
                curl -X DELETE \
                  -H "Authorization: Bearer ${{ secrets.NEON_API_KEY }}" \
                  "https://console.neon.tech/api/v2/projects/${{ vars.NEON_PROJECT_ID }}/branches/$branch" || \
                  echo "Failed to delete Neon branch: $branch"
              fi
            done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  team-notifications:
    name: Team Notifications
    runs-on: ubuntu-latest
    needs: [dependency-updates, security-scan, cleanup-branches]
    if: always() && (github.event_name == 'schedule' || github.event.inputs.task == 'all')
    steps:
      - name: Send team summary
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get recent activity summary
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels: 'automated',
              state: 'open',
              since: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
            });
            
            const prs = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open'
            });
            
            let summary = `## ðŸ“Š Daily Marlink Organization Report\n\n`;
            summary += `**Repository:** ${owner}/${repo}\n`;
            summary += `**Date:** ${new Date().toISOString().split('T')[0]}\n\n`;
            summary += `### ðŸ“ˆ Current Status\n`;
            summary += `- Open Pull Requests: ${prs.data.length}\n`;
            summary += `- Automated Issues: ${issues.data.length}\n\n`;
            
            if (issues.data.length > 0) {
              summary += `### ðŸ”§ Action Items\n`;
              issues.data.forEach(issue => {
                summary += `- [${issue.title}](${issue.html_url})\n`;
              });
            }
            
            summary += `\n### ðŸš€ Next Steps\n`;
            summary += `1. Review and address automated issues\n`;
            summary += `2. Merge ready pull requests\n`;
            summary += `3. Update project documentation if needed\n`;
            
            console.log(summary);
            
            // Create or update a pinned issue for team visibility
            const pinnedIssues = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels: 'pinned,team-summary',
              state: 'open'
            });
            
            if (pinnedIssues.data.length > 0) {
              // Update existing pinned issue
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: pinnedIssues.data[0].number,
                body: summary
              });
            } else {
              // Create new pinned issue
              await github.rest.issues.create({
                owner,
                repo,
                title: 'ðŸ“Š Marlink Team Dashboard',
                body: summary,
                labels: ['pinned', 'team-summary', 'automated']
              });
            }