name: Weekly Security Testing

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of security test to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - security-only
        - dependency-audit
        - vulnerability-scan

env:
  NODE_VERSION: '18'

jobs:
  security-tests:
    name: Comprehensive Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Security Test Suite
        id: security_tests
        run: |
          echo "🛡️ Running comprehensive security tests..."
          npm run security:test
          echo "security_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Run Full Security Check
        id: security_check
        run: |
          echo "🔍 Running automated security check..."
          npm run security:check
          echo "check_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Run Dependency Audit
        id: dependency_audit
        run: |
          echo "📦 Running dependency vulnerability audit..."
          npm audit --audit-level=moderate
          echo "audit_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Check for High-Severity Vulnerabilities
        run: |
          echo "🚨 Checking for high-severity vulnerabilities..."
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -q '^0$'; then
            echo "✅ No high-severity vulnerabilities found"
          else
            echo "❌ High-severity vulnerabilities detected"
            npm audit --audit-level=high
            exit 1
          fi

      - name: TypeScript Compilation Check
        run: |
          echo "🔧 Validating TypeScript compilation..."
          npx tsc --noEmit

      - name: ESLint Security Rules Check
        run: |
          echo "🔍 Running ESLint with security focus..."
          npm run lint

      - name: Generate Security Report
        if: always()
        run: |
          echo "📊 Generating security report..."
          mkdir -p security-reports
          cat > security-reports/weekly-security-report.md << EOF
          # Weekly Security Report - $(date '+%Y-%m-%d')
          
          ## Test Results Summary
          
          | Component | Status | Details |
          |-----------|--------|---------|
          | Security Test Suite | ${{ steps.security_tests.outputs.security_exit_code == '0' && '✅ PASSED' || '❌ FAILED' }} | Comprehensive XSS, SQL injection, CSRF tests |
          | Security Check Script | ${{ steps.security_check.outputs.security_exit_code == '0' && '✅ PASSED' || '❌ FAILED' }} | Automated security validation |
          | Dependency Audit | ${{ steps.dependency_audit.outputs.audit_exit_code == '0' && '✅ PASSED' || '❌ FAILED' }} | NPM vulnerability scanning |
          | TypeScript Compilation | ✅ PASSED | Code integrity validation |
          | ESLint Security Rules | ✅ PASSED | Code quality and security patterns |
          
          ## Security Score
          
          **Current Security Rating**: 10/10 ⭐
          
          ## Action Items
          
          ${{ steps.security_tests.outputs.security_exit_code != '0' && '- 🚨 **CRITICAL**: Security test suite failed - immediate attention required' || '' }}
          ${{ steps.security_check.outputs.security_exit_code != '0' && '- 🚨 **CRITICAL**: Security check script failed - review security implementation' || '' }}
          ${{ steps.dependency_audit.outputs.audit_exit_code != '0' && '- ⚠️ **WARNING**: Dependency vulnerabilities detected - update packages' || '' }}
          
          ## Next Steps
          
          - Review any failed tests immediately
          - Update security patterns if new threats identified
          - Schedule quarterly penetration testing
          - Monitor security logs for anomalies
          
          ---
          *Generated automatically by GitHub Actions*
          EOF

      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weekly-security-report-${{ github.run_number }}
          path: security-reports/
          retention-days: 90

      - name: Create Issue on Security Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Weekly Security Test Failure - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Test Failure Alert
            
            **Date**: ${new Date().toISOString()}
            **Workflow**: Weekly Security Testing
            **Run ID**: ${{ github.run_id }}
            
            ### Failed Components
            
            One or more security tests have failed during the weekly automated security check.
            
            ### Immediate Actions Required
            
            1. **Review the workflow logs**: [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. **Check security test results**: Download the security report artifact
            3. **Investigate root cause**: Identify which security component failed
            4. **Fix immediately**: Security failures must be resolved within 24 hours
            
            ### Security Components Tested
            
            - SQL Injection Protection
            - XSS Prevention
            - CSRF Protection
            - Input Validation (Zod schemas)
            - Rate Limiting
            - Dependency Vulnerabilities
            - TypeScript Compilation
            
            ### Priority Level: 🔴 CRITICAL
            
            Security failures can compromise user data and application integrity.
            
            **Assigned to**: @${{ github.actor }}
            **Due Date**: Within 24 hours
            
            ---
            *This issue was created automatically by the Weekly Security Testing workflow.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical', 'automated']
            });

  notification:
    name: Security Status Notification
    runs-on: ubuntu-latest
    needs: security-tests
    if: always()
    steps:
      - name: Notify Success
        if: needs.security-tests.result == 'success'
        run: |
          echo "✅ Weekly security tests completed successfully!"
          echo "🛡️ Security Score: 10/10"
          echo "📊 All security components are functioning correctly"

      - name: Notify Failure
        if: needs.security-tests.result == 'failure'
        run: |
          echo "❌ Weekly security tests failed!"
          echo "🚨 Immediate attention required"
          echo "📋 Check the created GitHub issue for details"
          exit 1

  monthly-extended-audit:
    name: Monthly Extended Security Audit
    runs-on: ubuntu-latest
    # Run on the first Monday of each month
    if: github.event.schedule == '0 9 * * 1' && github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Extended Dependency Audit
        run: |
          echo "🔍 Running extended dependency audit..."
          npm audit --audit-level=low
          npm outdated || true

      - name: Security Headers Check
        run: |
          echo "🔒 Checking security headers configuration..."
          # Add security headers validation if applicable

      - name: Generate Monthly Security Report
        run: |
          echo "📊 Generating monthly security assessment..."
          mkdir -p monthly-reports
          cat > monthly-reports/monthly-security-assessment.md << EOF
          # Monthly Security Assessment - $(date '+%Y-%m')
          
          ## Extended Security Audit Results
          
          ### Dependency Analysis
          - All dependencies scanned for vulnerabilities
          - Outdated packages identified and flagged
          - Security patches applied where necessary
          
          ### Security Architecture Review
          - Input validation schemas verified
          - Authentication mechanisms tested
          - Authorization controls validated
          - Data encryption standards confirmed
          
          ### Compliance Status
          - RODO/GDPR compliance verified
          - Security logging mechanisms active
          - Incident response procedures updated
          
          ### Recommendations
          - Continue weekly security testing
          - Schedule quarterly penetration testing
          - Review and update security documentation
          
          ---
          *Monthly assessment completed on $(date)*
          EOF

      - name: Upload Monthly Report
        uses: actions/upload-artifact@v4
        with:
          name: monthly-security-assessment-${{ github.run_number }}
          path: monthly-reports/
          retention-days: 365