#!/usr/bin/env node

/**
 * Environment Setup Script
 * Helps configure the project with proper API keys and environment variables
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const envPath = path.join(__dirname, '..', '.env');
const envLocalPath = path.join(__dirname, '..', '.env.local');

console.log('üîß School Finder Environment Setup');
console.log('=====================================\n');

async function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupEnvironment() {
  console.log('This script will help you configure your environment variables.\n');
  
  const config = {};
  
  // Database
  console.log('üìä Database Configuration:');
  const dbUrl = await question('Database URL (press Enter to keep current): ');
  if (dbUrl.trim()) config.DATABASE_URL = dbUrl;
  
  // Supabase
  console.log('\nüîê Supabase Configuration:');
  const supabaseUrl = await question('Supabase URL: ');
  const supabaseAnonKey = await question('Supabase Anon Key: ');
  const supabaseServiceKey = await question('Supabase Service Role Key: ');
  
  if (supabaseUrl) config.NEXT_PUBLIC_SUPABASE_URL = supabaseUrl;
  if (supabaseAnonKey) config.NEXT_PUBLIC_SUPABASE_ANON_KEY = supabaseAnonKey;
  if (supabaseServiceKey) config.SUPABASE_SERVICE_ROLE_KEY = supabaseServiceKey;
  
  // Google Maps
  console.log('\nüó∫Ô∏è Google Maps Configuration:');
  const googleMapsKey = await question('Google Maps API Key: ');
  if (googleMapsKey) config.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY = googleMapsKey;
  
  // Stack Auth
  console.log('\nüîë Stack Auth Configuration:');
  const stackProjectId = await question('Stack Project ID: ');
  const stackPublishableKey = await question('Stack Publishable Key: ');
  const stackSecretKey = await question('Stack Secret Key: ');
  
  if (stackProjectId) config.NEXT_PUBLIC_STACK_PROJECT_ID = stackProjectId;
  if (stackPublishableKey) config.NEXT_PUBLIC_STACK_PUBLISHABLE_KEY = stackPublishableKey;
  if (stackSecretKey) config.STACK_SECRET_SERVER_KEY = stackSecretKey;
  
  // Optional APIs
  console.log('\nüîß Optional APIs (press Enter to skip):');
  const apifyToken = await question('Apify API Token: ');
  const googleClientId = await question('Google OAuth Client ID: ');
  const googleClientSecret = await question('Google OAuth Client Secret: ');
  
  if (apifyToken) config.APIFY_API_TOKEN = apifyToken;
  if (googleClientId) config.GOOGLE_CLIENT_ID = googleClientId;
  if (googleClientSecret) config.GOOGLE_CLIENT_SECRET = googleClientSecret;
  
  // Generate .env.local file
  let envContent = '# Generated by setup-environment.js\n';
  envContent += `# Generated on: ${new Date().toISOString()}\n\n`;
  
  for (const [key, value] of Object.entries(config)) {
    envContent += `${key}="${value}"\n`;
  }
  
  // Add default values for missing keys
  const defaults = {
    NODE_ENV: 'development',
    NEXT_PUBLIC_ENV: 'development',
    NEXTAUTH_URL: 'http://localhost:3001',
    NEXT_PUBLIC_DEBUG: 'true'
  };
  
  envContent += '\n# Default values\n';
  for (const [key, value] of Object.entries(defaults)) {
    if (!config[key]) {
      envContent += `${key}="${value}"\n`;
    }
  }
  
  fs.writeFileSync(envLocalPath, envContent);
  
  console.log('\n‚úÖ Environment configuration saved to .env.local');
  console.log('üîÑ Please restart your development server to apply changes.');
  
  rl.close();
}

setupEnvironment().catch(console.error);