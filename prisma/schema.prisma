generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(uuid())
  name               String?
  email              String            @unique
  emailVerified      DateTime?         @map("email_verified")
  image              String?
  role               String            @default("user")
  subscriptionStatus String            @default("free") @map("subscription_status")
  subscriptionId     String?           @map("subscription_id")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  accounts           Account[]
  favorites          Favorite[]
  ratings            RatingsUsers[]
  searchHistory      SearchHistory[]
  sessions           Session[]
  subscriptionLogs   SubscriptionLog[]
  searches           UserSearches?

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserSearches {
  userId      String   @id @map("user_id")
  searchCount Int      @default(0) @map("search_count")
  lastReset   DateTime @default(now()) @map("last_reset")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lastReset])
  @@map("user_searches")
}

model SubscriptionLog {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  event          String
  subscriptionId String   @map("subscription_id")
  data           String
  createdAt      DateTime @default(now()) @map("created_at")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@map("subscription_logs")
}

model School {
  id              String                @id @default(uuid())
  name            String
  type            String
  address         Json
  contact         Json
  location        Json?
  googlePlaceId   String?               @map("google_place_id")
  officialId      String?               @map("official_id")
  status          String                @default("active")
  studentCount    Int?                  @map("student_count")
  teacherCount    Int?                  @map("teacher_count")
  establishedYear Int?                  @map("established_year")
  languages       Json?
  specializations Json?
  facilities      Json?
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  favorites       Favorite[]
  googleRatings   RatingsGoogle[]
  portalRatings   RatingsPortal?
  publicRatings   RatingsPublicPoland[]
  userRatings     RatingsUsers[]
  analytics       SchoolAnalytics[]
  images          SchoolImage[]
  socialMedia     SchoolSocialMedia[]

  @@map("schools")
}

model SchoolImage {
  id           String   @id @default(uuid())
  schoolId     String   @map("school_id")
  imageUrl     String   @map("image_url")
  imageType    String   @map("image_type")
  altText      String?  @map("alt_text")
  caption      String?
  source       String
  isVerified   Boolean  @default(false) @map("is_verified")
  displayOrder Int      @default(0) @map("display_order")
  uploadedAt   DateTime @default(now()) @map("uploaded_at")
  school       School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@map("school_images")
}

model SchoolSocialMedia {
  id            String   @id @default(uuid())
  schoolId      String   @map("school_id")
  platform      String
  profileUrl    String   @map("profile_url")
  username      String?
  followerCount Int?     @map("follower_count")
  isVerified    Boolean  @default(false) @map("is_verified")
  lastScraped   DateTime @default(now()) @map("last_scraped")
  createdAt     DateTime @default(now()) @map("created_at")
  school        School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@map("school_social_media")
}

model RatingsUsers {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  schoolId        String   @map("school_id")
  overallRating   Decimal  @map("overall_rating") @db.Decimal(2, 1)
  teachingQuality Decimal? @map("teaching_quality") @db.Decimal(2, 1)
  facilities      Decimal? @map("facilities") @db.Decimal(2, 1)
  safety          Decimal? @map("safety") @db.Decimal(2, 1)
  extracurricular Decimal? @map("extracurricular") @db.Decimal(2, 1)
  comment         String?
  isAnonymous     Boolean  @default(false) @map("is_anonymous")
  isVerified      Boolean  @default(false) @map("is_verified")
  helpfulVotes    Int      @default(0) @map("helpful_votes")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  school          School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
  @@index([schoolId])
  @@map("ratings_users")
}

model RatingsGoogle {
  id             String   @id @default(uuid())
  schoolId       String   @map("school_id")
  googleReviewId String   @map("google_review_id")
  rating         Decimal  @db.Decimal(2, 1)
  reviewText     String?  @map("review_text")
  authorName     String?  @map("author_name")
  authorPhoto    String?  @map("author_photo")
  reviewDate     DateTime @map("review_date")
  scrapedAt      DateTime @default(now()) @map("scraped_at")
  school         School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@unique([schoolId, googleReviewId])
  @@index([schoolId])
  @@map("ratings_google")
}

model RatingsPublicPoland {
  id          String   @id @default(uuid())
  schoolId    String   @map("school_id")
  source      String
  metricType  String   @map("metric_type")
  score       Decimal  @db.Decimal(5, 2)
  maxScore    Decimal? @map("max_score") @db.Decimal(5, 2)
  year        Int
  sourceUrl   String?  @map("source_url")
  collectedAt DateTime @default(now()) @map("collected_at")
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId])
  @@index([year])
  @@map("ratings_public_poland")
}

model RatingsPortal {
  id        String   @id @default(uuid())
  schoolId  String   @unique @map("school_id")
  sentiment Decimal  @db.Decimal(3, 2)
  keywords  Json?
  updatedAt DateTime @default(now()) @map("updated_at")
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("ratings_portal")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  schoolId  String   @map("school_id")
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
  @@index([userId])
  @@index([schoolId])
  @@map("favorites")
}

model SchoolAnalytics {
  schoolId         String   @map("school_id")
  date             DateTime @db.Date
  pageViews        Int      @default(0) @map("page_views")
  favoritesAdded   Int      @default(0) @map("favorites_added")
  ratingsSubmitted Int      @default(0) @map("ratings_submitted")
  avgTimeOnPage    Int      @default(0) @map("avg_time_on_page")
  clickThroughRate Decimal  @default(0) @map("click_through_rate") @db.Decimal(3, 2)
  school           School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@id([schoolId, date])
  @@index([date])
  @@map("school_analytics")
}

model SearchAnalytics {
  date        DateTime @db.Date
  searchTerm  String   @map("search_term") @db.VarChar(255)
  searchCount Int      @default(0) @map("search_count")
  avgResults  Decimal  @default(0) @map("avg_results") @db.Decimal(5, 1)

  @@id([date, searchTerm])
  @@index([searchTerm])
  @@map("search_analytics")
}

model SearchHistory {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  query     String   @db.VarChar(255)
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("search_history")
}
